import { AnyAction } from 'redux';

/*
This code defines a type Matchable that is a generic type that accepts another type AC which extends a function that returns AnyAction. 
The Matchable type is then defined as a combination of AC and an additional property type and a method match.

The type property is the type property of the return value of AC (which is a function that returns AnyAction).

The match method takes a single argument action and returns a boolean value indicating if the action is of the same type as the return value of AC.

In other words, the Matchable type allows you to define a type that can match a specific type of action, 
while still being able to use the action creators generated by AC.
*/
type Matchable<AC extends () => AnyAction> = AC & {
  type: ReturnType<AC>['type'];
  match(action: AnyAction): action is ReturnType<AC>;
};

export type ActionWithPayload<T, P> = {
  type: T;
  payload: P;
};

export type Action<T> = {
  type: T;
};

export function createAction<T extends string, P>(
  type: T,
  payload: P
): ActionWithPayload<T, P>;

export function createAction<T extends string>(
  type: T,
  payload: void
): Action<T>;

export function createAction<T extends string, P>(type: T, payload: P) {
  return { type, payload };
}
